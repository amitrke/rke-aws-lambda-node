service: subnextsrv1

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  environment:
    DYNAMODB_TABLE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
  
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}*"
    - Effect: Allow
      Action:
      - cognito-sync:*
      - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
    - Effect: Allow
      Action:
      - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*
package:
  exclude:
    - .git/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  microservice:
    handler: handler.microservice
    events:
      - http:
          path: db
          method: get
          cors: true
      - http:
          path: db
          method: post
          cors: true
      - http:
          path: db
          method: delete
          cors: true
      - http:
          path: db
          method: options
          cors: true
      - http:
          path: db
          method: put
          cors: true
  signin:
    handler: handler.signin
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/signin/{provider}
          method: get
          integration: lambda-proxy
  callback:
    handler: handler.callback
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/callback/{provider}
          method: get
          integration: lambda-proxy
  refresh:
    handler: handler.refresh
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/refresh/{refresh_token}
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "refresh_token":"$input.params('refresh_token')",
                  "id":"$input.params('id')",
                  "state":"$input.params('state')",
                  "host":"$input.params().header.get('host')",
                  "stage":"$context.stage"
                }
  authorize:
    handler: handler.authorize

plugins:
  - deployment-info
  
resources:
  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template
  # Condition is used to switch API Gateway custom domain creation
  Conditions:
    CreateCustomDomain:
      Fn::Not:
        - Fn::Equals:
          - ${self:provider.environment.REDIRECT_DOMAIN_NAME, ""}
          - ""
  Resources:
    AuthorizationFunctionArnParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: "/authentication/${self:provider.environment.STAGE}/authorization-function-arn"
        Type: "String"
        Value:
          Fn::GetAtt:
            - AuthorizeLambdaFunction
            - Arn
        Description: "SSM Parameter for Authorization function arn"
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: token
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        KeySchema:
        - AttributeName: token
          KeyType: HASH
        - AttributeName: type
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CACHE_DB_NAME}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        SSESpecification:
           SSEEnabled: true
        AttributeDefinitions:
         - AttributeName: userId
           AttributeType: S
         KeySchema:
         - AttributeName: userId
           KeyType: HASH
         ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1
         TableName: ${self:provider.environment.USERS_DB_NAME}
    RedirectDomainName:
      Type: AWS::ApiGateway::DomainName
      Condition: CreateCustomDomain
      Properties:
        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}
        CertificateArn: ${self:provider.environment.REDIRECT_CERTIFICATE_ARN}
    RedirectBasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Condition: CreateCustomDomain
      DependsOn: RedirectDomainName
      Properties:
        Stage: ${self:provider.environment.STAGE}
        DomainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME}
        RestApiId:
          Ref: ApiGatewayRestApi
    RedirectRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Condition: CreateCustomDomain
      Properties:
        HostedZoneId: ${self:provider.environment.REDIRECT_HOSTED_ZONE_ID}
        RecordSets:
        - Name: ${self:provider.environment.REDIRECT_DOMAIN_NAME}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # don't change -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            DNSName:
              Fn::GetAtt:
                - RedirectDomainName
                - DistributionDomainName
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}_user